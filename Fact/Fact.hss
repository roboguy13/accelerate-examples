rhs-of 'main

  -- Find the part of the code to transform to Accelerate
{ occurrence-of 'transform
  up; up; app-arg
  unfold
}

one-td fix-intro
one-td (unfold-rule "fix->iterLoop"); assume

one-td (unfold 'doneToId)

  -- Compute one step of the recursion: fix f ==> f (fix f)
one-td (forward fix-computation-rule)

repeat (one-td (unfold '.))
repeat (one-td (beta-reduce >>> let-subst))

  -- Float `Done` into the `case`s
repeat (one-td (case-float-arg-lemma "floating-Done")); assume

  -- Mark recursive branches with `Step`
repeat (one-td (unfold-rule "to-rec-step")); assume

