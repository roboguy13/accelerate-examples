flatten-module

set-pp-type Omit

rhs-of 'main

{
  application-of 'transform; app-arg
  unfold
}

one-td (unfold-rule "Acc-start"); assume

one-td fix-intro
one-td let-subst

one-td (unfold-rule "abs-fix"); assume

repeat (one-td (unfold '.))

repeat (one-td (beta-reduce >>> let-subst))

  -- float abs into non-Bool cases while also transforming Bool cases to cond
  repeat (one-td (unfold-rule "abs-if->cond" <+ case-float-arg-lemma "case-float-lemma" )); assume; assume

-- Cleanup 'case's introduced by RULE
repeat (one-td case-elim)

one-td (unfold-rule "recCall-intro"); assume

-- Abstract the variable in the conditionals in the 'cond's
repeat (one-td (unfold-rule "condBool-intro")); assume
stop-script
repeat (one-td (unfold-rule "condBool-elim" >>> abstract '__REC_ARG__)); assume
repeat (one-td (unfold-rule "cond'-elim")); assume

repeat (one-td case-elim)
repeat (one-td case-reduce)

repeat (one-td (unfold-rule "cond-rec-both")); assume


repeat (one-td (unfold '.))
repeat (one-td (beta-reduce >>> let-subst))

repeat (one-td (unfold-rule "abs-rep-elim")); assume
repeat (one-td case-elim)


repeat (one-td (unfold-rule "rep-abs-pair")); assume

